

# Dataset
dataset:
    dataset: endovis
    normalization:
        mean: [0.5, 0.5, 0.5]
        std: [0.5, 0.5, 0.5]
    batch_size: 5
    suffle: True
    num_workers: 6
    pin_memory: True
    image_dir: 
        train: /raid/datasets/public/EndoVisPose/Training/training/image
        val: /raid/datasets/public/EndoVisPose/Training/test/image
        test: /raid/datasets/public/EndoVisPose/Training/test/image
    detection_mask:
        train: /raid/datasets/public/EndoVisPose/Training/training/labels_jh/segmentation
        val: /raid/datasets/public/EndoVisPose/Training/test/labels_jh/segmentation
        test: /raid/datasets/public/EndoVisPose/Training/test/labels_jh/segmentation
    regression_mask: 
        train: /raid/datasets/public/EndoVisPose/Training/training/labels_jh/regression
        val: /raid/datasets/public/EndoVisPose/Training/test/labels_jh/regression
        test: /raid/datasets/public/EndoVisPose/Training/test/labels_jh/regression
    augmentation: 
        train: ['verticalflip', 'horizonflip']
        val: []
        test: []

    image_size: [320, 256]
    n_class: 9
    num_parts: 5
    num_connections: 4


post_processing:
  nms:
    window: 20

# Optimization & Scheduler
- optimization:
    optim: adam
    momentum: 0.98
    weight_decay: 0.00001
    init_lr: 0.01
    epochs: 30

- scheduler:
    scheduler:
    start_factor:
    end_factor:
    total_iters:
    last_epoch:
    gamma:
scheduler = dict()
scheduler['scheduler'] = 'linear_lr' #'step_lr' LinearLR
scheduler['start_factor'] = 1.0
scheduler['end_factor'] = 0
scheduler['total_iters'] = optimization['epochs']
scheduler['last_epoch'] = -1
scheduler['gamma'] = 0.1 # 0.05

configs['optimization'] = optimization
configs['scheduler'] = scheduler

# Loss
loss = dict()

loss['method'] = ['bce', 'mse']
loss['activation'] = [None, None]
loss['reduction'] = 'mean'
loss['weight'] = [None, None]#[ [0.1, 0.9], [0.1, 0.9]]
loss['label_smoothing'] = [0.0, 0.0]
configs['loss'] = loss

# Model
model = dict()
model['method'] = 'endovis_network'
model['n_channels'] = 64
model['bilinear'] = False
configs['model'] = model

# Metric
metric = dict()
metric['metric'] = 'rms' # root mean square
metric['threshold'] = 20
configs['metric'] = metric


# Defuat
configs['results'] = '/raid/results/optimal_surgery/endovis'

